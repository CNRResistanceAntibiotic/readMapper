#!/bin/bash
#Richard Bonnet
#1/07/2017



usage() { echo "Usage: $0 [-s sample file] [-r reads directory] [-d work directory] [-i initial of the user] <-F Overwrite output directory (Default=False)>" 1>&2; exit 1; }

force='0'
while getopts "s:r:d:i:VF" opt; do
    case "${opt}" in
        s)
            sampleFile=${OPTARG}
            ;;
        r)
            readsDir=${OPTARG}
            ;;
        d)
            wkDir=${OPTARG}
            ;;                        
        i)  
            initial=${OPTARG}
            ;;
        F)
            force='1'
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [ -z "${sampleFile}" ] || [ -z "${readsDir}" ] || [ -z "${wkDir}" ] || [ -z "${initial}" ]; then
    usage
fi

sampleFile=$(readlink -f ${sampleFile})
readsDir=$(readlink -f ${readsDir})
wkDir=$(readlink -f ${wkDir})

echo -e "\nSample file: ${sampleFile}"
echo    "Reads directory: ${readsDir}"
echo    "Work directory: ${wkDir}"

if [ ! -e "${sampleFile}" ] || [ ! -e "${readsDir}" ] || [ ! -e "${wkDir}" ]; then
    usage
fi

echo ""
echo "----------------"
echo "PREPARE THE JOBS"
echo "----------------"
#echo $force

if [ $force == '1' ];then
        echo "/usr/local/readmapper-v0.1/prepare_mapping.py -sf ${sampleFile} -rd ${readsDir} -wd ${wkDir} -in ${initial} -F"
	/usr/local/readmapper-v0.1/prepare_mapping.py -sf ${sampleFile} -rd ${readsDir} -wd ${wkDir} -in ${initial} -F

else
        echo "/usr/local/readmapper-v0.1/prepare_mapping.py -sf ${sampleFile} -rd ${readsDir} -wd ${wkDir} -in ${initial}"
	/usr/local/readmapper-v0.1/prepare_mapping.py -sf ${sampleFile} -rd ${readsDir} -wd ${wkDir} -in ${initial}
fi

echo ""
echo "-----------------"
echo "STARTING THE JOBS"
echo "-----------------"
sampleIDs=`cat ${sampleFile} | awk -F'\t' '{print $1}'`
total_count=`echo ${sampleIDs} | wc -w`
n=0

for sampleID in $sampleIDs; do
        let n="$n+1"
        echo "Sample ${n}/${total_count}: ${sampleID}"
        echo ""      
	#wkDir="${wkDir}/${sampleID}"
	mlst_file="${wkDir}/${sampleID}__calling__mlst_*.sh"
        echo $mlst_file

        if [ -e $mlst_file ];then
           echo "MLST detection in process for ${sampleID}... Take time (~1 to 5 min)"
	   ${mlst_file}
	   echo "MLST detection done. Parsing is starting."
	   /usr/local/readmapper-v0.1/parse_mlst_detection.py -s ${sampleID} -sf ${sampleFile} -wd ${wkDir} -d mlst
           rm ${mlst_file}
        fi
        
	arm_file="${wkDir}/${sampleID}__calling__armDB_*.sh"
	echo $arm_file
        if [ -e $arm_file ];then
	   echo ""
	   echo "ARM detection in process for ${sampleID}... Take time (~5 to 15 min)"
	   ${arm_file}
	   echo "ARM detection done. Parsing is starting."
	   /usr/local/readmapper-v0.1/parse_arm_detection.py -s ${sampleID} -sf ${sampleFile} -wd ${wkDir} -d arm
           rm ${arm_file}
	   echo ""
        fi

	vir_file="${wkDir}/${sampleID}__calling__virDB_*.sh"
        if [ -e $vir_file ];then
	   echo ""
	   echo "VIR detection in process for ${sampleID}... Take time (~5 to 15 min)"
	   ${vir_file}
	   echo "VIR detection done. Parsing is starting."
	   /usr/local/readmapper-v0.1/parse_vir_detection.py -s ${sampleID} -sf ${sampleFile} -wd ${wkDir} -d vir
           rm ${vir_file}
	   echo ""
        fi

	rep_file="${wkDir}/${sampleID}__calling__repDB_*.sh"
        if [ -e $rep_file ];then
	   echo ""
	   echo "REP detection in process for ${sampleID}... Take time (~5 to 15 min)"
	   ${rep_file}
	   echo "REP detection done. Parsing is starting."
	   /usr/local/readmapper-v0.1/parse_rep_detection.py -s ${sampleID} -sf ${sampleFile} -wd ${wkDir} -d rep
           rm ${rep_file}
	   echo ""
        fi
	
        echo "Write a report in docx file"
	/usr/local/readmapper-v0.1/write_docx.py -wd  ${wkDir}/${sampleID} -in ${initial}
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo ""
	echo ""
done

echo ""
echo "---------------"
echo "MERGING RESULTS"
echo "---------------"
/usr/local/readmapper-v0.1/write_merged_xlsx.py -wd ${wkDir} -sf ${sampleFile} -in ${initial}

